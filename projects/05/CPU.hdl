// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl
/**
 * The Hack Central Processing unit (CPU).
 * Parses the binary code in the instruction input and executes it according to the
 * Hack machine language specification. In the case of a C-instruction, computes the
 * function specified by the instruction. If the instruction specifies to read a memory
 * value, the inM input is expected to contain this value. If the instruction specifies
 * to write a value to the memory, sets the outM output to this value, sets the addressM
 * output to the target address, and asserts the writeM output (when writeM == 0, any
 * value may appear in outM).
 * If the reset input is 0, computes the address of the next instruction and sets the
 * pc output to that value. If the reset input is 1, sets pc to 0.
 * Note: The outM and writeM outputs are combinational: they are affected by the
 * instruction's execution during the current cycle. The addressM and pc outputs are
 * clocked: although they are affected by the instruction's execution, they commit to
 * their new values only in the next cycle.
 */
CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution

        reset;           // Signals whether to restart the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // Address of next instruction

    PARTS:
    // Manage the A-register 
    Not(in=instruction[15], out=isAInstruction); // MSB indicates whether to load directly
    // If C-code (instruction[15]==1) and the first d-bit is 1, load ALU
    And(a=instruction[15], b=instruction[5], out=loadALUOutToARegister);
    Mux16(a=instruction, b=ALUOut, sel=loadALUOutToARegister, out=muxAddressOut);

    Or(a=loadALUOutToARegister, b=isAInstruction, out=loadToA);
    ARegister(in=muxAddressOut, load=loadToA, out=ARegOut, out[0..14]=addressM);

    // D-register management
    // If it's an A-instruction, then don't load the ALU output.
    // instruction[4] controls whether we should write ALU->D 
    And(a=instruction[4], b=instruction[15], out=loadALUToD);
    DRegister(in=ALUOut, load=loadALUToD, out=DOut);
    
    // ALU management
    Mux16(a=ARegOut, b=inM, sel=instruction[12], out=ALUin);
    ALU(x=DOut, y=ALUin, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6], out=outM, out=ALUOut, zr=ALUOutZero, ng=ALUOutNeg);
    // Only write if indicated by d-bit, and isn't an A-instruction
    And(a=instruction[3], b=instruction[15], out=writeM); 

    // Program counter
    // Figure out whether to jump
    Not(in=ALUOutNeg, out=ALUOutNonNeg);
    Not(in=ALUOutZero, out=ALUOutNonZero);
    And(a=ALUOutNonNeg, b=ALUOutNonZero, out=ALUOutPos);

    // Check that comp < 0 
    And(a=instruction[2], b=ALUOutNeg, out=JLT);
    And(a=instruction[1], b=ALUOutZero, out=JEQ);
    And(a=instruction[0], b=ALUOutPos, out=JGT);
    Or(a=JLT, b=JEQ, out=JLE);
    Or(a=JLE, b=JGT, out=preJMP);
    // Make sure we aren't in an A-instruction 
    And(a=preJMP, b=instruction[15], out=JMP);
    Not(in=JMP, out=notJMP);
    PC(in=ARegOut, load=JMP, inc=notJMP, reset=reset, out[0..14]=pc);
}
